

git init - инициализация гита

git add . - индексация изменений (всех)

git commit -m "Initial commit" - создать коммит

git commit --amend -m "имя коммита"  - изменить название последнего коммита если он не был запушен

git push -u origin master - залить на удаленный репозиторий в ветку master

git request-pull Предложить для слияния

git pull - подтянуть все изменения с удаленного репозитория

git checkout -b develop - создать ветку develop и переключиться на нее

git checkout develop  - переключиться на ветку develop

git clone <адрес проекта> - клонирует репозиторий проекта в выбранную директорию

git status - показывает какие файлы были изменены

git branch <имя ветки> - Просто сделать ветку, не переключаясь на нее можно командой

git fetch -p origin - обновление локального кеша веток удаленного репозитория
git branch -r - отображает список веток удаленного репозитория
git branch - отображает список веток локального репозитория
git push origin --delete <имя ветки> - удаление ветки в удаленном репоизтории
git branch -d - удаление ветки локального репозитория
git config --global  credential.usehttppath true - разлогиниться текущим пользователем

git submodule foreach git pull origin master - обновить подмодули

Установка email и имени в гите:
git config --global user.email "email@example.com"
git config --global user.name "user"


Указываем тип коммита:

Есть несколько заранее определенных типов:
feature — используется при добавлении новой функциональности уровня приложения
fix — если исправили какую-то серьезную багу
docs — всё, что касается документации
style — исправляем опечатки, исправляем форматирование
refactor — рефакторинг кода приложения
test — всё, что связано с тестированием
chore — обычное обслуживание кода


